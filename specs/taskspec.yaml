# Specification Prompt

> Ingest the information from this file, implement the Low-Level Tasks, and generate the code that will satisfy the High and Mid-Level Objectives.

## High-Level Objective

- Adapt the existing codebase to support per-sample probe tensors as model inputs instead of a single global probe variable. This involves transitioning from a one-to-one relationship between `PtychoDataContainer` instances and probe tensors to a one-to-many relationship, allowing each sample within a dataset to reference its specific probe tensor via probe indices.

## Mid-Level Objective

- **Data Container Modification:**
  - Introduce a new data container class that can handle multiple probe tensors and associate each sample with the appropriate probe index.
  
- **Data Loading Enhancements:**
  - Modify data loading functions to assign and manage probe indices for each sample, ensuring alignment with the new data container structure.
  
- **Model Architecture Updates:**
  - Adjust the model architecture to accept and utilize per-sample probe tensors based on probe indices during training and inference.
  
- **Training Pipeline Adaptation:**
  - Update the training pipeline to handle the interleaving and shuffling of samples from multiple datasets, associating each with the correct probe tensor.
  
- **Testing Pipeline Consistency:**
  - Ensure that the testing pipeline remains compatible with the changes, avoiding shuffling of samples while maintaining probe associations.

## Implementation Notes

- **Technical Details:**
  - The new `probe_indices` attribute must be of dtype `int64` and match the first dimension of `self.X`, `self.Y_I`, etc.
  - All probes in the probe list must be `tf.Tensor` objects with identical shapes and dtypes.
  
- **Dependencies and Requirements:**
  - Ensure consistency across the following modules/files: `loader.py`, `raw_data.py`, `components.py`, `train_pinn.py`, `model.py`, and `tf_helper.py`.
  - Maintain compatibility with existing data loading and model training workflows.
  
- **Coding Standards:**
  - Adhere to the project's coding conventions, ensuring clear documentation and type hints.
  - Implement thorough error handling, especially for data integrity related to probe indices and tensor assignments.
  
- **Other Technical Guidance:**
  - Optimize data loading and model input pipelines to efficiently handle multiple probes without significant performance degradation.
  - Validate that shuffling and interleaving mechanisms during training do not disrupt the association between samples and their respective probes.

## Context

### Beginning Context

- `tochange.yaml`, containing the files that need to be modified and other relevant information.
- Existing files:
  - `./ptycho/loader.py`
  - `./ptycho/raw_data.py`
  - `./ptycho/workflows/components.py`
  - `./ptycho/train_pinn.py`
  - `./ptycho/model.py`
  - `./ptycho/tf_helper.py`

### Ending Context  

- `taskspec.yaml`, containing a well-formed spec prompt documenting the changes necessary to implement the high-level objective.
- All aforementioned files will be updated to support per-sample probe tensors, with new classes, attributes, and functions introduced as required.

## Low-Level Tasks
> Ordered from start to finish

1. **Create MultiPtychoDataContainer Class in `loader.py`**