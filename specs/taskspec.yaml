# Specification for Per-Sample Probe Adaptation

## High-Level Objective

- Adapt the codebase to support per-sample probe tensors within a new data structure while maintaining current functionality.

## Mid-Level Objective

- Implement a new data container class (`MultiPtychoDataContainer`) that manages lists of probe tensors.
- Modify data loading mechanisms to support multiple probes and the association of probe indices with samples.
- Update model and training workflows to dynamically utilize per-sample probe tensors.

## Implementation Notes

- Ensure the new `probe_indices` attribute is of dtype `int64` and aligned with other data attributes.
- Solutions must maintain compatibility across multiple modules with robust testing procedures.
- Adhere to consistent coding standards throughout all modifications.

## Context

### Beginning context
- `./ptycho/loader.py`
- `./ptycho/raw_data.py`
- `./ptycho/workflows/components.py`
- `./ptycho/train_pinn.py`
- `./ptycho/model.py`
- `./ptycho/tf_helper.py`

### Ending context  
- `./ptycho/loader.py` (updated to use multi-probe containers)
- `./ptycho/raw_data.py` (updated for multiple probes)
- `./ptycho/workflows/components.py` (new logic for sample interleaving)
- `./ptycho/train_pinn.py` (adapted for per-sample probes)
- `./ptycho/model.py` (model architecture updated)
- `./ptycho/tf_helper.py` (helper functions updated)

## Low-Level Tasks
> Ordered from start to finish

1. Create `MultiPtychoDataContainer` in `loader.py`