description: |
  Changes: we want to adapt this codebase such that the probe tensor is a per-sample input
  to the model instead of a global variable. 
  Currently, the probe is stored in PtychoDataContainer. PtychoDataContainer contains
  a single probe tensor. The current assumption is that all samples share the same
  probe. I.e. one PtychoDataContainer instance corresponds to one dataset.
  We want to define a new data type that mirrors PtychoDataContainer, but
  contains multiple datasets and stores a list of probes. For each sample,
  it must contain an index into the list of probes specifying which probe
  to use for that sample.
  Merging multiple PtychoDataContainer instances for *training* (but not testing) 
  will require shuffling the samples so that the datasets are interleaved. Note that 
  we can assume that each RawData instance corresponds to a single probe.
  We will create a new class called MultiPtychoDataContainer that will contain data corresponsing to one or more PtychoDataContainer instances. It will NOT subclass PtychoDataContainer.
  ---
  QA:
  For the probe indices:
  Should this be a new attribute like self.probe_indices matching batch size?
  A: It'll have the same size (first dimension) as self.X, self.Y_I, etc
  What dtype should probe indices be? (int32/int64?)
  A: int64
  For dataset merging:
  Should original dataset boundaries be preserved somehow?
  A: No
  Do we need a way to identify which original dataset a sample came from?
  A: Yes. The probe index keeps track of this
  For the probe list:
  Should it be a list of tf.Tensor or np.ndarray?
  A: tf.Tensor
  Do all probes need same shape/dtype?
  A: Yes
  For testing:
  Do we need a way to reconstruct original dataset groupings?
  A: No
  Should test set handling be completely separate?
  A: No. The only difference for test data is that the samples are not shuffled
  Open questions:
  Is it better to create a new MultiPtychoDataContainer class or to modify PtychoDataContainer, or to compose it?
