Summary of Planned Actions:

1. Refactor the data-generating workflow to prioritize experimental datasets provided by users over synthetic datasets or sample experimental data shipped with the repo.

2. Understand the structure and handling of experimental data in `xpp.py` as it will serve as the starting point for handling user-provided experimental data.

3. Modify `diffsim.py` to accommodate the new experimental data format, which consists of a pair of three numpy arrays provided in .npz format for both training and evaluation.

4. Update `train.py` and other helper modules to handle the new experimental data format and ensure that the reconstruction algorithm can process user-provided data.

5. Define a new data structure to contain all input data for a run of the reconstruction algorithm, which should be compatible with both synthetic data (generated by `diffsim.py`) and experimental data (`xpp.py`).

6. Ensure that the new data structure includes:
   - Training and evaluation/testing diffraction data
   - Scan point coordinates, including nominal and true coordinates for synthetic datasets
   - Ground truth real-space object images for synthetic datasets; for experimental data, these fields can be `None`

7. Write tests to ensure that refactoring does not break existing functionality, assuming the original implementation is correct.

8. Implement the feature following the refactoring, ensuring that all modules that return a dataset can generate an instance of the new data structure.

Note: The refactoring and feature implementation are intended to make the codebase more adaptable to user-provided experimental data and improve the usability of the reconstruction algorithm.
