==============================================================================
PYTORCH WORKFLOW ASSETS INVENTORY - EXECUTIVE SUMMARY
==============================================================================

Date: 2025-10-17
Project: PtychoPINN2 / Ptychodus Integration (Phase B)
Analyst: Claude Code (Haiku 4.5)

==============================================================================
KEY FINDINGS
==============================================================================

REUSABILITY SCORE: 65/100

Breaking down by subsystem:
  - Training loop (Lightning):      95% ready
  - Data loading (memory-mapped):   85% ready  
  - Config translation (bridge):   100% ready (untouched!)
  - Inference stitching:            60% ready
  - Model persistence:              20% ready (MLflow-only)

==============================================================================
CRITICAL INTEGRATION BLOCKERS (3)
==============================================================================

1. PARAMS.CFG NOT POPULATED (SEVERITY: HIGH)
   - Status: config_bridge.py exists but is NEVER CALLED
   - Impact: All legacy consumers (raw_data, loader, model) see uninitialized state
   - Fix: 5 lines of code in train.py + inference.py
   - Effort: < 1 day

2. DATA FORMAT INCOMPATIBILITY (SEVERITY: HIGH)
   - Status: PyTorch uses TensorDict, TF uses NPZ dict
   - Impact: Cannot export training data for downstream reuse
   - Fix: Add NPZ export method to dataloader.py
   - Effort: 1-2 days

3. MODEL PERSISTENCE FORMAT (SEVERITY: HIGH)
   - Status: Only MLflow supported, no wts.h5.zip equivalent
   - Impact: Cannot persist models for cross-system transfer
   - Fix: Implement PyTorch .pth + metadata bundle
   - Effort: 1-2 days

==============================================================================
IMMEDIATE WINS (Quick Fixes)
==============================================================================

Task 1: Invoke config_bridge in all entry points
  Files: train.py (line 92), inference.py (line 85)
  Code:  from ptycho.config.config import update_legacy_dict
         tf_config = to_training_config(...)
         update_legacy_dict(ptycho.params.cfg, tf_config)
  Time:  < 30 minutes

Task 2: Add required config fields to defaults
  Files: config_params.py
  Fields: n_groups (critical for grouping), test_data_file (eval data)
  Time:  15 minutes

Task 3: Test params.cfg flow with legacy modules
  Files: tests/torch/test_config_bridge.py
  Verify: raw_data, loader, model can read config correctly
  Time:  1-2 hours

==============================================================================
COMPONENT BREAKDOWN
==============================================================================

TRAINING (train.py - 255 lines)
  Status: 70% ready
  What works: Full Lightning training pipeline, multi-GPU DDP, fine-tuning
  What's missing: Config bridge invocation, NPZ export
  Reusable: YES (with config fix)

INFERENCE (inference.py - 212 lines)
  Status: 60% ready
  What works: Model loading, reassembly, visualization
  What's missing: Params.cfg population, standard contract
  Reusable: PARTIAL (tight coupling to reassembly helpers)

CONFIG TRANSLATION (config_bridge.py - 377 lines)
  Status: 100% COMPLETE
  Implements: 9-field translation (MVP scope)
  What's missing: ONLY THE CALL TO update_legacy_dict()
  Reusable: YES (production-ready code)

MODEL (model.py - 1268 lines)
  Status: 95% ready
  What works: Autoencoder, multi-stage training, loss functions
  What's missing: Standard inference contract wrapper
  Reusable: YES (clean Lightning interface)

DATA (dataloader.py - 783 lines)
  Status: 85% ready
  What works: Memory mapping, DDP sync, coordinate filtering
  What's missing: NPZ export method
  Reusable: PARTIAL (needs schema export)

API LAYER (api/base_api.py - 994 lines)
  Status: 40% ready
  What works: ConfigManager, high-level wrappers
  What's missing: Model save_pytorch(), complete orchestration
  Reusable: PARTIAL (incomplete implementations)

==============================================================================
CRITICAL PATH TO INTEGRATION
==============================================================================

Phase 1: Bridge Connection (< 1 day)
  [ ] Add update_legacy_dict() calls to train.py & inference.py
  [ ] Add n_groups default to config_params.py
  [ ] Test params.cfg population flow
  
Phase 2: Data Export (1-2 days)
  [ ] Implement NPZ export from TensorDict
  [ ] Validate against specs/data_contracts.md
  [ ] Test with downstream RawData.from_file()

Phase 3: Model Persistence (1-2 days)
  [ ] Implement PyTorch native save (pth + manifest)
  [ ] Implement PyTorch native load
  [ ] Verify with Ptychodus model lifecycle

Phase 4: Integration Test (1 day)
  [ ] Create test reconstructor using PyTorch backend
  [ ] Verify params.cfg flows to all legacy consumers
  [ ] Test training + inference round-trip

TOTAL ESTIMATED EFFORT: 4-5 days

==============================================================================
ENTRY POINTS FOR PTYCHODUS INTEGRATION
==============================================================================

Training Entry Point:
  File: ptycho_torch/train.py::main()
  Current: Loads configs, creates Lightning trainer
  Gap: No config_bridge call
  Fix: Add 10 lines of bridge code

Inference Entry Point:
  File: ptycho_torch/inference.py::load_and_predict()
  Current: Loads model from MLflow, runs prediction
  Gap: No params.cfg population, tight reassembly coupling
  Fix: Add bridge + decouple reassembly

Config Handling:
  File: ptycho_torch/config_bridge.py::to_training_config()
  Current: Full translation logic implemented
  Gap: NEVER CALLED
  Fix: Invoke in train.py + inference.py

Data Format:
  File: ptycho_torch/dataloader.py::memory_map_data()
  Current: Creates TensorDict in custom format
  Gap: Not compatible with NPZ spec, no export
  Fix: Add method to export as NPZ

Model Serialization:
  File: ptycho_torch/api/base_api.py::PtychoModel.save_pytorch()
  Current: Stubbed out (pass statement)
  Gap: No native PyTorch save format
  Fix: Implement pth + metadata bundle

==============================================================================
REUSABILITY RECOMMENDATIONS
==============================================================================

High Reuse:
  ✓ config_bridge.py - Use as-is, just call it
  ✓ model.py (Lightning) - Mature, well-tested
  ✓ train_utils.py - Utilities broadly applicable
  ✓ dataloader.py (with schema export) - Core asset

Partial Reuse:
  ◆ inference.py - Needs decoupling & params.cfg fix
  ◆ train.py - Needs config bridge integration
  ◆ api/base_api.py - Needs complete save/load

Don't Reuse:
  ✗ api/base_api.py - Incomplete implementations (save_pytorch=pass)
  ✗ Current model persistence - MLflow-only, not cross-system

==============================================================================
FILES TO PRIORITIZE
==============================================================================

Core (highest priority for integration):
  1. /home/ollie/Documents/PtychoPINN2/ptycho_torch/config_bridge.py
  2. /home/ollie/Documents/PtychoPINN2/ptycho_torch/train.py
  3. /home/ollie/Documents/PtychoPINN2/ptycho_torch/config_params.py
  4. /home/ollie/Documents/PtychoPINN2/ptycho_torch/dataloader.py

Secondary (needed for full integration):
  5. /home/ollie/Documents/PtychoPINN2/ptycho_torch/model.py
  6. /home/ollie/Documents/PtychoPINN2/ptycho_torch/inference.py
  7. /home/ollie/Documents/PtychoPINN2/ptycho_torch/api/base_api.py

==============================================================================
NEXT STEPS
==============================================================================

Immediate (< 24 hours):
  1. Read PYTORCH_WORKFLOW_INVENTORY.md (full 11-section document)
  2. Review config_bridge.py - validate translation logic
  3. Identify quick wins in config_params.py

Short-term (1-2 days):
  4. Implement Phase 1: Bridge connection
  5. Create test for params.cfg population
  6. Report findings to supervisor

Medium-term (3-5 days):
  7. Implement Phase 2-3: Data export + model persistence
  8. Integration test with Ptychodus stub
  9. Documentation update

==============================================================================
