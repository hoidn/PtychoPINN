Summary of Actions Taken:
1. Analyzed the functions and module-level variables in `xpp.py`, `generate_data.py`, and `train.py`.
2. Outlined a plan for refactoring to improve modularity and maintainability.
3. Created a simple test case to load test data and calculate the mean of the 'X' array.
4. Discussed creating a comprehensive set of test cases for `xpp.py`.
5. Provided example test cases for loading data, normalization, data splitting, and utility functions.
6. Implemented the test cases in `tests/test_xpp.py`.
7. Added a test case to check data shape based on the configuration stored in `params.py`.

Remaining Plan:
1. Execute the refactoring of `xpp.py`, `generate_data.py`, and `train.py` as per the outlined plan.
2. Implement the feature for handling user-provided experimental data.
3. Integrate the new feature with the training script to allow seamless switching between synthetic and user-provided data.
4. Run the test cases to ensure that the new feature works as expected and does not introduce regressions.
5. Update the documentation to reflect the new feature and any changes made during refactoring.
6. Review the code and tests for any final adjustments or cleanup needed.
