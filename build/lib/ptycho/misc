#####
## Utils for shifting and matching pieces of tensors
#####

# from scipy.spatial.distance import hamming

# def mk_coords():
#     for i in (0, 1):
#         for j in (0, 1):
#             yield (i, j)
            
# def get_pairs():
#     for i, p1 in enumerate(mk_coords()):
#         for p2 in list(mk_coords())[i:]:
#             if hamming(np.array(p1), np.array(p2)) == .5:
#                 yield (p1, p2)

# def get_range(i, j, toggle_i, toggle_j):
#     if toggle_i:
#         DX = N - offset
#         return (1 - i) * offset, (1 - i) * offset + DX, 0, offset + N
#     elif toggle_j:
#         DY = N - offset
#         return 0, offset + N, (1 - j) * offset, (1 - j) * offset + DY
#     else:
#         raise ValueError

# def toggle(coords1, coords2):
#     return (coords1[0] ^ coords2[0], coords1[1] ^ coords2[1])

# def get_overlap_pair(grid, coords1, coords2):
#     """
#     Get objects from neighboring scan points, cropping such that things line up properly.
#     """
#     i1start, i1end, j1start, j1end = get_range(*(coords1 + toggle(coords1, coords2)))
#     i2start, i2end, j2start, j2end = get_range(*(coords2 + toggle(coords1, coords2)))
#     return grid[:, coords1[0], coords1[1], i1start: i1end, j1start: j1end, :],\
#         grid[:, coords2[0], coords2[1], i2start: i2end, j2start: j2end, :]

# def get_overlap_pairs(grid):
#     pairs = list(set(get_pairs()))
#     return [get_overlap_pair(grid, p1, p2) for p1, p2 in pairs]

# def overlap_penalty(grid):
#     mae = tf.keras.losses.MeanAbsoluteError()
#     penalties = [mae(a1, a2) for a1, a2 in get_overlap_pairs(grid)]
#     return tf.math.reduce_mean(penalties)

# overlap_penalty(Y_I_test)

# pairs = list(set(get_pairs()))
# it = iter(pairs)

# a1, a2 = get_overlap_pair(Y_I_train, *next(it))
# plt.imshow((a1 - a2)[0], cmap = 'jet')

# overlap_penalty(Y_I_train)
